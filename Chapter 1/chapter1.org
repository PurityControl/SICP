#+TITLE: Chapter 1 Building Abstraction with Procedures

* Building Abstractions with Procedures
** The elements of Programming
The most important aspect of a computer language is the means with
which we can combine simple ideas to form more complex ideas.

The thre main ways of doing this are:

- *primitive expressions*, which represent the simplest entities the language is concerned with,
- *means of combination*, by which compound elements are built from simpler ones, and
- *means of abstraction*, by which compound elements can be named and manipulated as units.

*** Expressions

Expressions are valid syntax that allow the interpreter to take our
instructions and process them in an unambigous way.

In scheme this is done using list syntax where the first element in a
list is evaluated as a function call unless it is escaped in some way.

*** Naming and the Environment

Programming languages must provide a way for using names to refer
to computational objects. We say that the /name/ identifies a /variable/
whose /value/ is the object.

In the Scheme dialect of Lisp, we name things with define.

#+BEGIN_EXAMPLE
(define size 2)

(define circumference (* 2 pi radius))
#+END_EXAMPLE

*Define* is our simplest means of abstraction, it allows us to use
simple names to refer to more complex operations.

*** Evaluating combinations

Evaluating combinations is a recursive process. Evaluating a combination consists of:

- Evaluating the subexpressions of the combinations.
- Apply the procedure of function calls

Generally we will work from left to right simplifying expressions to
their most basic form. When we meet a compound expression we will
recurse into it until fully simplified and continue removing from left
to right until evaluation is fully simplified. Then we can calculate
the expression.

Some expressions, such as /define/, are special forms and have their own
rules for evaluation. In such cases you will not be able to just
simplify and evaluate their arguments.

*** Compound Procedures

We can define compound procedure which takes /formal parameters/.

The general form for this is

#+BEGIN_EXAMPLE
(define (<name> <formal parameters>) <body>)
#+END_EXAMPLE

So the procedure square can be defined as

#+BEGIN_EXAMPLE
(define (square x)
  (* x x))
#+END_EXAMPLE

It is then simply called as

#+BEGIN_EXAMPLE
(square 10)
>100
#+END_EXAMPLE

*** The substitution model for procedure application

The substitution model is a way of calculating the result of a
compound statement. It is the model that scheme uses when performing
evaluations and is sometimes called /applicative order evaluation/.

This model consists of moving from left to right and each time a
compound statement is found recursing down into the statement to
evaluate it. Once the results have been calculated they replace the
compound statement.

This sequence of evaluation is shown in the example below.

#+BEGIN_EXAMPLE
(define (sum-of-squares x y)
  (+ (square x) (square y)))

(define a 5)

(sum-of-squares (+ a 1) (* a 2))

(sum-of-squares (+ 5 1) (* 5 2))

(+ (square 6) (square 10))

(+ (* 6 6) (* 10 10))

(+ 36 100)

136
#+END_EXAMPLE

**** Normal order evaluation

An alternative to /applicative order evaluation/ is /normal order
evaluation/.

This is also known as /lazy evaluation/ as any compound statements are
only evaluated when they are actually needed. In our example above the
evaluation is different but the results are the same. However, in some
cases it can lead to a different result.

#+BEGIN_EXAMPLE
(define (sum-of-squares x y)
  (+ (square x) (square y)))

(define a 5)

(sum-of-squares (+ a 1) (* a 2))

(sum-of-squares (+ 5 1) (* 5 2))

(+ (square (+ 5 1)) (square (* 5 2)))

(+ (* (+ 5 1) (+ 5 1)) (* (* 5 2) (* 5 2)))

(+ (* 6 6) (* 10 10))

(+ 36 100)

136
#+END_EXAMPLE

*** Conditional expressions and predicates

In order to make procedures powerful we need to be able to
conditionally execute code.

In scheme there are two main ways to execute code based on
conditions.

**** Case analysis

A case analysis form in scheme is a cond expression. It takes a list
and each item in the list is a list with a condition expression and an
execution expression. The first condition expression reached triggers
the associated expression to be evaluated. An example of calculating
the absolute value of a number would be:

#+BEGIN_EXAMPLE
(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
#+END_EXAMPLE

**** If statement

If is a special form, it is a restricted type of conditional that can
be used when there are precisely two cases in the case analysis. The
general form of an if expression is

#+BEGIN_EXAMPLE
(if <predicate> <consequent> <alternative>)
#+END_EXAMPLE

This means that /abs/ could be written with an if statement

#+BEGIN_EXAMPLE
(define (abs x)
  (if (< x 0)
      (- x)
      x))
#+END_EXAMPLE

**** Logical composition operations and predicates

In addition to predicates such as /</, />/ and /=/ there are logical
composition operations, which enable us to construct compound
predicates. The three most frequently used are /and, or and not/.

#+BEGIN_EXAMPLE
(define (>= x y)
  (or (> x y) (= x y)))

or alternatively as

(define (>= x y)
  (not (< x y)))
#+END_EXAMPLE

*** Exercise 1.1.
#+BEGIN_QUOTE
Below is a sequence of expressions. What is the result printed by
the interpreter in response to each expression? Assume that the sequence is to
be evaluated in the order in which it is presented.
#+END_QUOTE

#+BEGIN_EXAMPLE
10
>10

(+ 5 3 4)
>12

(- 9 1)
>8

(/ 6 2)
>3

(+ (* 2 4) (- 4 6))
>6

(define a 3)
>

(define b (+ a 1))
>

(+ a b (* a b))
>19

(= a b)
>#f

(if (and (> b a) (< b (* a b)))
    b
    a)
>4

(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
>16

(+ 2 (if (> b a) b a))
>6

(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
>16
#+END_EXAMPLE

*** Exercise 1.2
#+BEGIN_QUOTE
Translate the following expression into prefix form

\begin{equation}
\dfrac{5 + 4 + (2 - (3 - (6 + 4/5)))}{3(6 - 2)(2 - 7)}
\end{equation}
#+END_QUOTE

#+BEGIN_EXAMPLE
(/ (+ 5
      4
      (- 2
        (- 3
           (+ 6
              (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))
#+END_EXAMPLE

*** Exercise 1.3.
#+BEGIN_QUOTE
Define a procedure that takes three numbers as arguments and returns the sum
of the squares of the two larger numbers.
#+END_QUOTE

#+BEGIN_EXAMPLE
(define (sum-square-largest a b c)
  (define (square x)
    (* x x))
  (define (sum-square x y)
    (+ (square x) (square y)))
  (cond
    ((and (< a b) (< a c)) (sum-square b c))
    ((and (< b c) (< b a)) (sum-square a c))
    (else (sum-square a b))))

;test
(= 25 (sum-square-largest 2 3 4))
(= 25 (sum-square-largest 2 4 3))
(= 25 (sum-square-largest 4 3 2))
(= 41 (sum-square-largest 3 4 5))
(= 41 (sum-square-largest 4 3 5))
(= 41 (sum-square-largest 5 3 4))
#+END_EXAMPLE

*** Exercise 1.4.
#+BEGIN_QUOTE
Observe that our model of evaluation allows for combinations whose operators
are compound expressions. Use this observation to describe the behavior of
the following procedure:
#+END_QUOTE

#+BEGIN_EXAMPLE
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+END_EXAMPLE

it adds the absolute value of b to a by adding it to a if b is positive
or taking away from a if b is negative.

*** Exercise 1.5. 
#+BEGIN_QUOTE
Ben Bitdiddle has invented a test to determine whether the interpreter he
is faced with is using applicative-order evaluation or normal-order
evaluation.
He defines the following two procedures:
#+END_QUOTE

#+BEGIN_EXAMPLE
(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))
#+END_EXAMPLE

#+BEGIN_QUOTE
Then he evaluates the expression
#+END_QUOTE

#+BEGIN_EXAMPLE
(test 0 (p))
#+END_EXAMPLE

#+BEGIN_QUOTE
What behavior will Ben observe with an interpreter that uses
applicative-order evaluation? What behavior will he observe with
an interpreter that uses normal-order evaluation? Explain your answer.
(Assume that the evaluation rule for the special form if is the same
whether the interpreter is using normal or applicative order:
The predicate expression is evaluated first, and the result
determines whether to evaluate the consequent or the alternative
expression.)
#+END_QUOTE


With normal order evaluation the arguments are not evaluated until needed.
Therefore the runtion with return 0 as the if only evaluates consequent.

With applicative-order evaluation the arguments will be evaluated prior to
the test function being run and when the y argument is evaluated it will
start an infinite recursion.

*** Example: Square Roots by Newton's Method

A common way to calculate square roots is Newtons method of successive
approximations.
This method states that if we have a guess ~y~ for the ~sqrt~ of ~x~ we can
create a better guess by averaging ~y~ with ~x / y~.

This can be expressed in a function that wishes other functions were
available. These imaginary functions that are called can then be
written subsequently

#+BEGIN_EXAMPLE
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))
#+END_EXAMPLE

This function eloquently describes how Newton's method is
calculated at a high level of abstraction.

It also calls itself recursively eliminating the need to use looping
you would see in other common languages.

We can now write the ~good-enough?~ and ~improve~ functions that this
funciton depends upon to work.

#+BEGIN_EXAMPLE
(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))
#+END_EXAMPLE

This allows us to now use ~sqrt~ in the same way as we can use any other
function.

#+BEGIN_EXAMPLE
(sqrt 9)
>3.00009155413138

(sqrt (+ 100 37))
>11.704699917758145

(sqrt (+ (sqrt 2) (sqrt 3)))
>1.7739279023207892

(square (sqrt 1000))
>1000.000369924366
#+END_EXAMPLE

*** Exercise 1.6.
#+BEGIN_QUOTE
Alyssa P. Hacker doesn't see why if needs to be provided as a
special form. ``Why can't I just define it as an ordinary procedure in terms
of cond?'' she asks. Alyssa's friend Eva Lu Ator claims this can indeed be
done, and she defines a new version of if:

#+BEGIN_EXAMPLE
(define (good-enough? guess x)
  "always return true to prove function never terminates regardles of the predicate"
  #t)

(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
#+END_EXAMPLE

Eva demonstrates the program for Alyssa:

#+BEGIN_EXAMPLE
(new-if (= 2 3) 0 5)
;5

(new-if (= 1 1) 0 5)
;0
#+END_EXAMPLE

Delighted, Alyssa uses new-if to rewrite the square-root program:

#+BEGIN_EXAMPLE
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))

;this will not terminate
;(srt-iter 1 2)
#+END_EXAMPLE

What happens when Alyssa attempts to use this to compute square roots? Explain.
#+END_QUOTE

As the consequent and alternative are formal parameters to the new function
both will be evaluated. Because the recursive call (the alternative) is
evaluated regardless of the outcome of the predicate the function will never
terminate.

*** Exercise 1.7.
#+BEGIN_QUOTE
The good-enough? test used in computing square roots will not be very
effective for finding the square roots of very small numbers. Also, in
real computers, arithmetic operations are almost always performed with
limited precision. This makes our test inadequate for very large numbers.
Explain these statements, with examples showing how the test fails for
small and large numbers. An alternative strategy for implementing good-enough?
is to watch how guess changes from one iteration to the next and to stop when
the change is a very small fraction of the guess. Design a square-root
procedure that uses this kind of end test. Does this work better for small
and large numbers?
#+END_QUOTE

#+BEGIN_EXAMPLE
(define (square x)
  (* x x))

(define (abs x)
  (if (> x 0)
      x
      (- x)))


;original good-enough
(define (good-enough? prev guess)
  (define delta 0.0001)
  (< (abs (- prev guess)) delta))


(define (good-enough? guess x)
  (define delta 0.0001)
  (< (abs (- guess (square x))) delta))

(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (sqrt-iter prev guess x)
  (if (good-enough? prev guess)
      guess
      (sqrt-iter guess
                 (improve guess x)
                 x)))
#+END_EXAMPLE

On modern machines the result for small values is calculated so
quickly without timing multiple iterations there is no significant
speed increase.
The problem with large numbers is such that the accuracy of the delta
(precision) is lost in the way floats / doubles store their information.
Therefore for sufficiently large numbers the algorithm fails to terminate
in reasonable time.

*** Exercise 1.8.
#+BEGIN_QUOTE
Newton's method for cube roots is based on the fact that if y is an
approximation to the cube root of x, then a better approximation is
given by the value

\begin{equation}
\dfrac{\dfrac{x}{y^2} + 2y}{3}
\end{equation}

Use this formula to implement a cube-root procedure analogous to the
square-root procedure. (In section 1.3.4 we will see how to implement
Newton's method in general as an abstraction of these square-root and
cube-root procedures.)
#+END_QUOTE

#+BEGIN_EXAMPLE
(require rackunit rackunit/text-ui)
(define delta 0.000001)

(define (cube-root x)

  (define (cube x)
    (* x x x))

  (define (abs x)
    (if (> x 0) x (- x)))

  (define (good-enough? guess x)
    (< (abs (- (abs (cube guess))
               x))
       delta))

  (define (improve guess x)
    (/ (+ (/ x (* guess guess))
          (* 2 guess))
       3))

  (define (cube-root guess x)
    (if (good-enough? guess x)
        guess
        (cube-root (improve guess x) x)))

  (cube-root 1.0 x))


;;tests
(define file-tests
  (test-suite
  "Tests cube root within delta"
  ; delta in tests is on the answer, delta in solution is on parameter
  (check-= (cube-root 0.000008) (expt 0.000008 1/3) (expt delta 1/3))
  (check-= (cube-root 8) (expt 8 1/3) (expt delta 1/3))
  (check-= (cube-root 100) (expt 100 1/3) (expt delta 1/3))
  (check-= (cube-root 5000) (expt 5000 1/3) (expt delta 1/3))))


(run-tests file-tests)
#+END_EXAMPLE

*** Procedures as black box abstractions

When we look at the definition of our square root problem we can see
that it breaks up into a number of subproblems. These subproblems are
autonomous units that are defined by their own procedure.

- sqrt
  - sqrt-iter
    - good-enough?
      - square
      - abs
    - improve
      - average

The importance of this decomposition strategy is not simply one of
dividing the program into parts. Rather, it is crucial that each
procedure accomplishes an identifiable task that can be used as a
module in defining other procedures.
This means that ~good-enough?~ is not concerned with how square
calculates its result, just with the fact that it produces the
answer. Indeed, as far as the good-enough? procedure is concerned,
square is not quite a procedure but rather an abstraction of a
procedure, a so-called procedural abstraction. At this level of
abstraction, any procedure that computes the square is equally good.

**** Local Names

A formal parameter of a procedure has a very special role in the
procedure definition, in that it doesn't matter what name the formal
parameter has. Such a name is called a bound variable, and we say that
the procedure definition binds its formal parameters. The meaning of a
procedure definition is unchanged if a bound variable is consistently
renamed throughout the definition.

If a variable is not bound, we say that it is free. The set of
expressions for which a binding defines a name is called the scope of
that name. In a procedure definition, the bound variables declared as
the formal parameters of the procedure have the body of the procedure
as their scope.

**** Internal definitions and block structure

We have one kind of name isolation available to us so far: The formal
parameters of a procedure are local to the body of the procedure. The
square-root program illustrates another way in which we would like to
control the use of names.

If we look at our ~sqrt~ function we have an addtional problem. The
procedures ~sqrt-iter~, ~good-enough?~, and ~improve~ are an abstraction of
the parts of the ~sqrt~ function. Maybe other programs require their own
~good-enough?~ function and their function needs to coexist with our
own.

This can be done by making the ~procedural abstractions~ local to the
~sqrt~ function by nesting definitions. Such a nesting is called ~block
structure~.

#+BEGIN_EXAMPLE
(define (sqrt x)
  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
  (sqrt-iter 1.0 x))
#+END_EXAMPLE

Block structure has two benefits. The first has already been discussed
and is one of namespacing.

The second is that the parameters passed into to ~sqrt~ are in scope for
all of the definitions nested in the block structure. This simplifies
the nested functions as these variables do not need to be passed into
them as formal parameters. Instead these values are accessed as free
variables in the internal definitions. This disclipline is called
lexical scoping.

Using this techique the example can be rewritten as:

#+BEGIN_EXAMPLE
(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
#+END_EXAMPLE

** Procedures and the Processes They Generate

*** Linear Recursion and Iteration

There are many ways to compute factorials. One way is to make use of
the observation that n! is equal to n times (n - 1)! for any positive
integer n:

Thus, we can compute n! by computing (n - 1)! and multiplying the
result by n. If we add the stipulation that 1! is equal to 1, this
observation translates directly into a procedure:

#+BEGIN_EXAMPLE
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
#+END_EXAMPLE

Now let's take a different perspective on computing factorials. We
could describe a rule for computing n! by specifying that we first
multiply 1 by 2, then multiply the result by 3, then by 4, and so on
until we reach n. More formally, we maintain a running product,
together with a counter that counts from 1 up to n. We can describe
the computation by saying that the counter and the product
simultaneously change from one step to the next according to the rule

Once again, we can recast our description as a procedure for computing
factorials:

#+BEGIN_EXAMPLE
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
#+END_EXAMPLE

Compare the two processes. From one point of view, they seem hardly
different at all. Both compute the same mathematical function on the
same domain, and each requires a number of steps proportional to n to
compute n!. Indeed, both processes even carry out the same sequence of
multiplications, obtaining the same sequence of partial products. On
the other hand, when we consider the "~shapes~" of the two processes,
we find that they evolve quite differently.

The first type of function is characterized by a chain of deferred
operations, is called a recursive process. Carrying out this process
requires that the interpreter keep track of the operations to be
performed later on. In the computation of n!, the length of the chain
of deferred multiplications, and hence the amount of information
needed to keep track of it, grows linearly with n (is proportional to
n), just like the number of steps. Such a process is called a linear
recursive process.

By contrast, the second process does not grow and shrink. At each
step, all we need to keep track of, for any n, are the current values
of the variables product, counter, and max-count. We call this an
iterative process. In general, an iterative process is one whose state
can be summarized by a fixed number of state variables, together with
a fixed rule that describes how the state variables should be updated
as the process moves from state to state and an (optional) end test
that specifies conditions under which the process should terminate. In
computing n!, the number of steps required grows linearly with n. Such
a process is called a linear iterative process.

The contrast between the two processes can be seen in another way. In
the iterative case, the program variables provide a complete
description of the state of the process at any point. If we stopped
the computation between steps, all we would need to do to resume the
computation is to supply the interpreter with the values of the three
program variables. Not so with the recursive process. In this case
there is some additional "~hidden~" information, maintained by the
interpreter and not contained in the program variables, which
indicates "~where the process is~" in negotiating the chain of
deferred operations. The longer the chain, the more information must
be maintained.30

In contrasting iteration and recursion, we must be careful not to
confuse the notion of a recursive process with the notion of a
recursive procedure. When we describe a procedure as recursive, we are
referring to the syntactic fact that the procedure definition refers
(either directly or indirectly) to the procedure itself. But when we
describe a process as following a pattern that is, say, linearly
recursive, we are speaking about how the process evolves, not about
the syntax of how a procedure is written. It may seem disturbing that
we refer to a recursive procedure such as fact-iter as generating an
iterative process. However, the process really is iterative: Its state
is captured completely by its three state variables, and an
interpreter need keep track of only three variables in order to
execute the process.

One reason that the distinction between process and procedure may be
confusing is that most implementations of common languages (including
Ada, Pascal, and C) are designed in such a way that the interpretation
of any recursive procedure consumes an amount of memory that grows
with the number of procedure calls, even when the process described
is, in principle, iterative. As a consequence, these languages can
describe iterative processes only by resorting to special-purpose
"~looping constructs~" such as do, repeat, until, for, and while. The
implementation of Scheme we shall consider in chapter 5 does not share
this defect. It will execute an iterative process in constant space,
even if the iterative process is described by a recursive
procedure. An implementation with this property is called
tail-recursive. With a tail-recursive implementation, iteration can be
expressed using the ordinary procedure call mechanism, so that special
iteration constructs are useful only as syntactic sugar.

*** Exercise 1.9.
#+BEGIN_QUOTE
Each of the following two procedures defines a method for adding two
positive integers in terms of the procedures inc, which increments its
argument by 1, and dec, which decrements its argument by 1.


#+BEGIN_EXAMPLE
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
#+END_EXAMPLE


Using the substitution model, illustrate the process generated by each procedure
in evaluating (+ 4 5). Are these processes iterative or recursive?
#+END_QUOTE

The first method is a recursive process

#+BEGIN_EXAMPLE
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
#+END_EXAMPLE

The second method is iterative

#+BEGIN_EXAMPLE
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9
#+END_EXAMPLE

*** Exercise 1.10.
#+BEGIN_QUOTE
The following procedure computes a mathematical function called
Ackermann's function.

#+BEGIN_EXAMPLE
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
#+END_EXAMPLE

What are the values of the following expressions?

#+BEGIN_EXAMPLE
(A 1 10)
#+END_EXAMPLE

#+END_QUOTE

#+BEGIN_EXAMPLE
(A 1 10)

(A 0
  (A 1 9))

(A 0 
  (A 0
     (A 1 8)))

(A 0
   (A 0
      (A 0
         (A 1 7))))

(A 0
   (A 0
      (A 0
         (A 0
            (A 1 6)))))

(A 0
   (A 0
      (A 0
         (A 0
            (A 0
               (A 1 5))))))

(A 0
   (A 0
      (A 0
         (A 0
            (A 0
               (A 0
                  (A 1 4)))))))

(A 0
   (A 0 
      (A 0
         (A 0
            (A 0
               (A 0
                  (A 0
                     (A 1 3))))))))

(A 0
   (A 0
      (A 0
         (A 0
            (A 0
               (A 0
                  (A 0
                     (A 0
                        (A 1 2)))))))))

(A 0
   (A 0
      (A 0
         (A 0
            (A 0
               (A 0
                  (A 0
                     (A 0
                        (A 0 
                           (A 1 1)))))))))

(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
(A 0 (A 0 (A 0 (A 0 (A 0 32)))))
(A 0 (A 0 (A 0 (A 0 64))))
(A 0 (A 0 (A 0 128)))
(A 0 (A 0 256))
(A 0 512)

1024
#+END_EXAMPLE

#+BEGIN_QUOTE
(A 2 4)
#+END_QUOTE

#+BEGIN_EXAMPLE
(A 2 4)
(A 1 (A 2 3))
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 (A 0 (A 1 1))))
(A 1 (A 1 (A 0 2)))
(A 1 (A 1 4))
(A 1 (A 0 (A 1 3)))
(A 1 (A 0 (A 0 (A 1 2))))
(A 1 (A 0 (A 0 (A 0 (A 1 1)))))
(A 1 16)

given problem above (A 1 16) = 2^16 
65536
#+END_EXAMPLE

#+BEGIN_QUOTE
(A 3 3)
#+END_QUOTE

#+BEGIN_EXAMPLE
(A 3 3)
(A 2 (A 3 2))
(A 2 (A 2 (A 3 1)))
(A 2 (A 2 2))
(A 2 (A 1 (A 2 1)))
(A 2 (A 1 2))
(A 2 (A 0 (A 1 1)))
(A 2 (A 0 2))
(A 2 4)

see problem above
65536
#+END_EXAMPLE


#+BEGIN_QUOTE
Consider the following procedures, where A is the procedure defined above:

(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))

Give concise mathematical definitions for the functions computed by the
procedures f, g, and h for positive integer values of n. For example,
(k n) computes 5n^2. 

#+END_QUOTE

#+BEGIN_EXAMPLE
(define (f n) (A 0 n))
#+END_EXAMPLE
\begin{equation}
2n
\end{equation}

#+BEGIN_EXAMPLE
(define (g n) (A 1 n))
#+END_EXAMPLE
\begin{equation}
2^n
\end{equation}

#+BEGIN_EXAMPLE
(define (h n) (A 2 n))
#+END_EXAMPLE
\begin{equation}
(2^n)^n
\end{equation}

#+BEGIN_EXAMPLE
(define (k n) (* 5 n n))
#+END_EXAMPLE

\begin{equation}
5n^2
\end{equation}

*** Tree Recursion

Another common pattern of computation is called tree recursion. As an
example, consider computing the sequence of Fibonacci numbers, in
which each number is the sum of the preceding two:

#+BEGIN_EXAMPLE
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
#+END_EXAMPLE

Thus, the process uses a number of steps that grows exponentially with
the input. On the other hand, the space required grows only linearly
with the input, because we need keep track only of which nodes are
above us in the tree at any point in the computation. In general, the
number of steps required by a tree-recursive process will be
proportional to the number of nodes in the tree, while the space
required will be proportional to the maximum depth of the tree.

We can also formulate an iterative process for computing the Fibonacci
numbers. The idea is to use a pair of integers a and b, initialized to
Fib(1) = 1 and Fib(0) = 0, and to repeatedly apply the simultaneous
transformations

#+BEGIN_EXAMPLE
(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))
#+END_EXAMPLE

One should not conclude from this that tree-recursive processes are
useless. When we consider processes that operate on hierarchically
structured data rather than numbers, we will find that tree recursion
is a natural and powerful tool.


**** Example - Counting Change

Writing a procedure to compute the number of ways to change any given
amount of money can be done trivially as a recursive process.

The number of ways to change amount ~a~ using ~n~ kinds of coins equals

- the number of ways to change amount ~a~ using all but the first kind
  of coin, plus 
- the number of ways to change amount ~a - d~ using all ~n~ kinds of
  coins, where ~d~ is the denomination of the first kind of coin.

To see why this is true, observe that the ways to make change can be
divided into two groups: those that do not use any of the first kind
of coin, and those that do. Therefore, the total number of ways to
make change for some amount is equal to the number of ways to make
change for the amount without using any of the first kind of coin,
plus the number of ways to make change assuming that we do use the
first kind of coin. But the latter number is equal to the number of
ways to make change for the amount that remains after using a coin of
the first kind.

Thus, we can recursively reduce the problem of changing a given amount
to the problem of changing smaller amounts using fewer kinds of
coins. Consider this reduction rule carefully, and convince yourself
that we can use it to describe an algorithm if we specify the
following degenerate cases:

- If ~a~ is exactly 0, we should count that as 1 way to make change.
- If ~a~ is less than 0, we should count that as 0 ways to make change.
- If ~n~ is 0, we should count that as 0 ways to make change.

We can easily translate this description into a recursive procedure:

#+BEGIN_EXAMPLE
(define (count-change amount)
  (cc amount 5))
(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
#+END_EXAMPLE

*** Exercise 1.11:
#+BEGIN_QUOTE
A function f is defined by the rule that

f(n)=n if n<3 and f(n)=f(n-1)+2f(n-1)+3f(n-3) if n>=3.

Write a procedure that computes f by means of a recursive process.
Write a procedure that computes f by means of an iterative process.
#+END_QUOTE

#+BEGIN_EXAMPLE
;; Recursive
(define (fn x)
  (if (< x 3)
      x
      (+ (fn (sub1 x))
         (* 2 (fn (- x 2)))
         (* 3 (fn (- x 3))))))


;; Iteration
(define (fn-iter x)
  (define (iter third second first total count)
    (if (= count 3)
        total
        (iter second
              first
              total
              (+ total
                 (* 2 first)
                 (* 3 second))
              (sub1 count))))
  (if (< x 3)
      x
      (iter 0 1 2 4 x)))
#+END_EXAMPLE
