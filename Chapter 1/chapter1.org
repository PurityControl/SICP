#+TITLE: Chapter 1 Building Abstraction with Procedures

* The elements of Programming
The most important aspect of a computer language is the means with
which we can combine simple ideas to form more complex ideas.

The thre main ways of doing this are:

- *primitive expressions*, which represent the simplest entities the language is concerned with,
- *means of combination*, by which compound elements are built from simpler ones, and
- *means of abstraction*, by which compound elements can be named and manipulated as units.

** Expressions

Expressions are valid syntax that allow the interpreter to take our
instructions and process them in an unambigous way.

In scheme this is done using list syntax where the first element in a
list is evaluated as a function call unless it is escaped in some way.

** Exercise 1.1.
Below is a sequence of expressions. What is the result printed by
the interpreter in response to each expression? Assume that the sequence is to
be evaluated in the order in which it is presented.

#+BEGIN_EXAMPLE
10
>10
(+ 5 3 4)
>12
(- 9 1)
>8
(/ 6 2)
>3
(+ (* 2 4) (- 4 6))
>6
(define a 3)
>
(define b (+ a 1))
>
(+ a b (* a b))
>19
(= a b)
>#f
(if (and (> b a) (< b (* a b)))
    b
    a)
>4
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
>16
(+ 2 (if (> b a) b a))
>6
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
>16
#+END_EXAMPLE

